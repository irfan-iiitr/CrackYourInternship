class Solution {
public:
TreeNode *first=NULL ,*middle=NULL, *last=NULL,*prev=NULL;
void inorder(TreeNode* root)
{
    if(root==NULL) return;
    inorder(root->left);
    if(prev!=NULL and (root->val < prev->val))//coming from left...if sm
    {
        if(first==NULL)
        first=prev,middle=root;
        else
        last=root; 
    }
    prev=root;//store the point of diversion of left and right...
    inorder(root->right);
}
    void recoverTree(TreeNode* root) {
        

        inorder(root);
        if(first&&last)
        swap(first->val,last->val);
        else if(first && middle)
        swap(first->val,middle->val);

    }
};
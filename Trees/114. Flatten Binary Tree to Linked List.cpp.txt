class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root) return;
        stack<TreeNode*> st;
        st.push(root);

        while(!st.empty()){
            auto node=st.top(); st.pop();
            if(node->right!=NULL){
                st.push(node->right); //push right first then left
            }
            if(node->left!=NULL){
                st.push(node->left);  //so that left remains on top
            }
            if(!st.empty()){
                node->right=st.top();   //take the left..point node->right to left node
           }
           node->left=NULL; //make left part =NULL;
        }
    }
};

O(N) ..all nodes visited only onces
---------------------------------NO SPACE_-----------------------------

class Solution 
{
public:
    void flatten(TreeNode* root) {
        TreeNode* curr = root;
        while (curr) {
            if (curr->left) {
                TreeNode* runner = curr->left;
                while (runner->right) {
                    runner = runner->right;
                }
                runner->right = curr->right;
                curr->right = curr->left;
                curr->left = nullptr;
            }
            curr = curr->right;
        }
    }
};
Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

Note: H is the height of the tree and this space is used implicitly for the recursion stack.
 

TreeToList

Example 1:

Input:
      1
    /  \
   3    2
Output:
3 1 2 
2 1 3 
Explanation: DLL would be 3<=>1<=>2
Example 2:

Input:
       10
      /   \
     20   30
   /   \
  40   60
Output:
40 20 60 10 30 
30 10 60 20 40
Explanation:  DLL would be 
40<=>20<=>60<=>10<=>30.


        void convertToDLL(Node* root, Node* &head, Node*  &prev) {
        if (!root) return;
        
        // Recursively convert the left subtree
        convertToDLL(root->left, head, prev);
        
        // If prev is null, it means this is the leftmost node (head of the DLL)
        if (prev == nullptr) {
            head = root;
        } else {
            // Otherwise, set the current node's left pointer to prev
            root->left = prev;
            // And prev's right pointer to the current node
            prev->right = root;
        }
        
        // Update prev to the current node
        prev = root;
        
        // Recursively convert the right subtree
        convertToDLL(root->right, head, prev);
    }
    //Function to convert binary tree to doubly linked list and return it.
    Node * bToDLL(Node *root)
    {
         if (!root) return nullptr;
        
        Node* head = nullptr; // Head of the DLL
        Node* prev = nullptr; // Pointer to keep track of the previous node in DLL
        
        // Helper function to perform in-order traversal and create DLL
        convertToDLL(root, head, prev);
        
        return head;
    }
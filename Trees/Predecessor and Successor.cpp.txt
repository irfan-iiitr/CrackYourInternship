class Solution
{
public:
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        pre = NULL;
        suc = NULL;
        findPreSucUtil(root, pre, suc, key);
    }

private:
    void findPreSucUtil(Node* root, Node*& pre, Node*& suc, int key)
    {
        if (root == NULL) return;

        // If the key is found at root
        if (root->key == key)
        {
            // The predecessor is the rightmost child of the left subtree
            if (root->left != NULL)
            {
                Node* temp = root->left;
                while (temp->right)
                    temp = temp->right;
                pre = temp;
            }
            
            // The successor is the leftmost child of the right subtree
            if (root->right != NULL)
            {
                Node* temp = root->right;
                while (temp->left)
                    temp = temp->left;
                suc = temp;
            }
            return;
        }
        
        // If key is smaller than root's key, go to left subtree
        if (key < root->key)
        {
            suc = root; // update successor
            findPreSucUtil(root->left, pre, suc, key);
        }
        else // key is greater than root's key, go to right subtree
        {
            pre = root; // update predecessor
            findPreSucUtil(root->right, pre, suc, key);
        }
    }
};

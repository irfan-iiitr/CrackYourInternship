/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 // Define an enum to represent the state of each node
enum State {
    NEEDS_CAMERA,  // The node needs a camera
    COVERED,       // The node is covered by a camera
    HAS_CAMERA     // The node has a camera
};

class Solution {
public:
 State cover(TreeNode* root, int &cameras) {
        if (!root) return COVERED; // Null nodes are considered covered
        
        State left = cover(root->left, cameras);
        State right = cover(root->right, cameras);
        
        if (left == NEEDS_CAMERA || right == NEEDS_CAMERA) { // If any child needs a camera
            cameras++;
            return HAS_CAMERA; // Current node has a camera
        }
        
        if (left == HAS_CAMERA || right == HAS_CAMERA) { // If any child has a camera
            return COVERED; // Current node is covered
        }
        
        return NEEDS_CAMERA; // Current node needs a camera
    }
    int minCameraCover(TreeNode* root) {
         int cameras = 0;
        State rootState = cover(root, cameras);
        
        if (rootState == NEEDS_CAMERA) {
            cameras++;
        }
        
        return cameras;
    }
};
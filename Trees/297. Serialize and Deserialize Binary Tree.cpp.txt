class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s="";
        if(root==NULL) return "#";
        queue<TreeNode*> q; q.push(root);

        while(!q.empty()){
           auto node=q.front() ; q.pop();
           if(node==NULL)
           s=s+"#,";
           else
           {
            s=s+ to_string(node->val) +",";

           q.push(node->left);
           q.push(node->right);
           }

        }

        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        cout<<data<<endl;
         if(data=="#") return NULL;
         stringstream ss(data); 
         string word;
         getline(ss,word,',');
         TreeNode* root= new TreeNode(stoi(word));
         queue<TreeNode*> q;
         q.push(root);

         while(!q.empty()){
            TreeNode* node= q.front();
            q.pop();
            
            //left
            if(getline(ss,word,',')){
                if(word!="#"){
                    TreeNode* leftNode= new TreeNode(stoi(word));
                    node->left=leftNode;
                    q.push(leftNode);
                }
                else node->left=NULL;
            }
            
            //right
            if(getline(ss,word,',')){
                if(word!="#"){
                    TreeNode* rightNode=new TreeNode(stoi(word));
                    node->right=rightNode;
                    q.push(rightNode);
                }
            }


         }

         return root;
    }

   
};
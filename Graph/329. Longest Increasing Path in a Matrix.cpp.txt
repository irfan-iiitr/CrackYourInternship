class Solution {
public:
 int f(int i,int j, int m,int n,int prev,vector<vector<int>>& matrix,vector<vector<int>>& dp){
    if(min(i,j)<0 or i>=m  or j>=n or matrix[i][j]<=prev) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    int up=1+f(i-1,j,m,n,matrix[i][j],matrix,dp);
   int left=1+f(i,j-1,m,n,matrix[i][j],matrix,dp);
   int right=1+f(i,j+1,m,n,matrix[i][j],matrix,dp);
   int down=1+f(i+1,j,m,n,matrix[i][j],matrix,dp);
  return dp[i][j]=max({up,down,left,right});
 }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m=matrix.size(); int n=matrix[0].size();
        int maxi=0;
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int len=f(i,j,m,n,-1,matrix,dp);
                maxi=max(maxi,len);
            }
        }

        return maxi; 
    }
};
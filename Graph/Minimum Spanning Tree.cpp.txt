int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        
        priority_queue<pii,vector<pii> , greater<pii>> q;
        vector<int> vis(V,0);
       
        q.push({0,0});
        
        int sum=0;
        
        while(!q.empty()){
            auto node=q.top(); q.pop();
            int wt=node.first; int u=node.second; 
            
            if(vis[u]==1) continue;
            
            sum+=wt; 
            
            vis[u]=1; //visiited when popped from queuue
            
            for(auto nbr:adj[u]){
               if(vis[nbr[0]]==0){
                   q.push({nbr[1],nbr[0]});
                  
               }
            }
        }
        
        return sum;
        
    }


-------------------------------------------KRUSKAL------------------------------------

class DisjointSet{
    vector<int> rank,parent;
    public:
    DisjointSet(int n){
        parent.resize(n,0);
        rank.resize(n,0);
        for(int i=0;i<n;i++){
           parent[i]=i; 
        }
    }
    
    int findPar(int u){
        if(parent[u]==u) return u;
        else
       return parent[u]=findPar(parent[u]);
    }
     void unionByRank(int u, int v) {
        int pu = findPar(u), pv = findPar(v);
        if (rank[pu] < rank[pv]) {
            parent[pu] = pv;
        } else if (rank[pv] < rank[pu]) {
            parent[pv] = pu;
        } else {
            parent[pv] = pu;
            rank[pu]++;
        }
    }
};






class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int, pair<int, int>>> edges;
        for (int i = 0; i < V; i++) {
            for (auto it : adj[i]) {
                int adjNode = it[0];
                int wt = it[1];
                int node = i;

                edges.push_back({wt, {node, adjNode}});
            }
        }
        DisjointSet ds(V);
        sort(edges.begin(), edges.end());
        int mstWt = 0;
        for (auto it : edges) {
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;

            if (ds.findPar(u) != ds.findPar(v)) {
                mstWt += wt;
                ds.unionByRank(u, v);
            }
        }

        return mstWt;
        
        
    }
};
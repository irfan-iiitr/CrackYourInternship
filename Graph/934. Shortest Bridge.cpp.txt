class Solution {
public:
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1};

    void dfs(int i, int j, queue<pair<int, pair<int, int>>> &q, vector<vector<int>> &vis, vector<vector<int>> &grid) {
        int n = grid.size();
        if (i < 0 || j < 0 || i >= n || j >= n || vis[i][j] == 1 || grid[i][j] == 0) return;

        vis[i][j] = 1;
        q.push({0, {i, j}});
        dfs(i, j + 1, q, vis, grid);
        dfs(i, j - 1, q, vis, grid);
        dfs(i + 1, j, q, vis, grid);
        dfs(i - 1, j, q, vis, grid);
    }

    int bfs(queue<pair<int, pair<int, int>>> &q, vector<vector<int>> &grid, vector<vector<int>> &vis) {
        int n = grid.size();

        while (!q.empty()) {
            auto u = q.front();
            int dist = u.first;
            int x = u.second.first;
            int y = u.second.second;
            q.pop();  // Pop the front element from the queue

            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx >= 0 && ny >= 0 && nx < n && ny < n && vis[nx][ny] == 0) {
                    if (grid[nx][ny] == 1) return dist;
                    vis[nx][ny] = 1;
                    q.push({dist + 1, {nx, ny}});
                }
            }
        }

        return -1;
    }

    int shortestBridge(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> vis(n, vector<int>(n, 0));
        queue<pair<int, pair<int, int>>> q;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(i, j, q, vis, grid);
                    return bfs(q, grid, vis);
                }
            }
        }

        return -1;
    }
};

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> outdegree(n,0);

        vector<int> adj[n];

        for(int i=0;i<n;i++){
            int m=graph[i].size();
            for(int j=0;j<m;j++){
                int u=i; int v=graph[i][j];
                adj[v].push_back(u);
                outdegree[u]++;
            }
        }

        queue<int> q;

        for(int i=0;i<n;i++){
            if(outdegree[i]==0)
            q.push(i);
        }

        vector<int> ans;

        while(!q.empty()){
            auto node=q.front(); q.pop();
            ans.push_back(node);

            for(auto nbr:adj[node]){
                outdegree[nbr]--;
                if(outdegree[nbr]==0){
                    q.push(nbr);
                }
            }
        }

        sort(ans.begin(),ans.end());

        return  ans;
    }
};
class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        queue<pair<pair<int,int>,int> >q;
         int n=grid.size();
         vector<vector<int>> vis(n,vector<int>(n,0));
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                {
                    q.push({{i,j},0});
                    vis[i][j]=1;
                }
            }
        }

        if(q.size()==0 or q.size()==n*n) return -1;

            int dx[4]={-1,0,1,0};
            int dy[4]={0,1,0,-1};

            int ans=0;

           
            while(!q.empty()){
                auto f=q.front(); int x=f.first.first; int y=f.first.second; int t=f.second;
                q.pop();

                ans=max(ans,t);
                
                for(int i=0;i<4;i++){
                    int nx=x+dx[i]; int ny=y+dy[i];
                    if(nx>=0 and ny>=0 and ny<n and nx<n and vis[nx][ny]==0)
                    {
                        q.push({{nx,ny},t+1});
                        vis[nx][ny]=1;
                    }
                }
            }


            return ans;
        
    }
};
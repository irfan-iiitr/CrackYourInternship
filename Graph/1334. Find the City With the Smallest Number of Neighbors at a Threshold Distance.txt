


There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.
Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.
Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

 

Example 1:


Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>>v(n,vector<int>(n,INT_MAX));
        for(auto i : edges){
            v[i[0]][i[1]] = i[2];
            v[i[1]][i[0]] = i[2];
        }
        for(int i = 0; i<n; i++)  //same node dist 0
        v[i][i] = 0;


        for(int k = 0; k<n; k++){ //warshall
            for(int i = 0; i<n; i++){
                for(int j = 0; j<n; j++){
                    if(v[i][k] == INT_MAX || v[k][j] == INT_MAX) continue;
                    v[i][j] = min(v[i][j],v[i][k] + v[k][j]);
                }
            }
        }
        int cntcity = n;
        int cityno = -1;
        for(int i = 0; i<n; i++){
            int cnt = 0;
            for(int j = 0; j<n; j++){
                if(v[i][j] <= distanceThreshold) cnt++;
            }
            if(cntcity >= cnt){
                cityno = i;
                cntcity = cnt;
            }
        }
        return cityno;
    }
};





















--------------------------------------------------------DIJKASTRA FROM EACH NODE---------------------------

class Solution {
public:

int bfs(int src,vector<pair<int,int>> adj[], int n,int k){



    priority_queue<pair<int,int>,vector<pair<int,int>> , greater<pair<int,int>>> q;
    vector<int> dist(n,INT_MAX);
    dist[src]=0;
    q.push({0,src});

    while(!q.empty()){
        auto f=q.top(); q.pop();
        int wt=f.first; int node=f.second;

        for(auto nbr:adj[node]){
            int v=nbr.first; int newWt=nbr.second;
            if(dist[v]>newWt+wt){
                dist[v]=newWt+wt;
                q.push({dist[v],v});
            }
        }

    }
    int c=0;

    for(int i=0;i<n;i++){
       // cout<<dist[i]<<" ";
        if(src!=i and dist[i]<=k)
        c++;

    }
   // cout<<endl;
    return c;



    
}
    int findTheCity(int n, vector<vector<int>>& edges, int k) {
        
      vector<pair<int,int>> adj[n];
      for(auto e:edges){
        adj[e[0]].push_back({e[1],e[2]});
        adj[e[1]].push_back({e[0],e[2]});

      }

      vector<int> neighbours(n,0);


        int ans=INT_MAX; int idx=0;
        for(int i=0;i<n;i++){
            int len=bfs(i,adj,n,k);
            if(len<=ans){
                ans=len;
                idx=i;
            }
        }



        

        return idx;
    }
};
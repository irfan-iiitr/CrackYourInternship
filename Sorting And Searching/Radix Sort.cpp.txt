TC -  O(d * (n + b))
where d is the number of digits, n is the number of elements, and b is the base of the number system being used.
SC - O(n + b), where n is the number of elements and b is the base of the number system. This space complexity comes from the need to 
create buckets for each digit value and to copy the elements back to the original array after each digit has been sorted.

Radix Sort is a non-comparative sorting algorithm that sorts numbers by processing individual digits. It uses a stable sorting algorithm (like counting sort) as a subroutine to sort the digits.

Steps for Radix Sort
Find the Maximum Number: Determine the number with the most digits.
Iterate Over Each Digit: Starting from the least significant digit to the most significant digit:
Use a stable sorting algorithm (e.g., counting sort) to sort the array based on the current digit.
Update the Array: After sorting based on each digit, update the array and move to the next significant digit.


// A function to do counting sort of arr[] according to the digit represented by exp.
void countSort(vector<int>& arr, int exp) {
    int n = arr.size();
    vector<int> output(n); // output array
    int count[10] = {0};

    // Store count of occurrences in count[]
    for (int i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // Change count[i] so that count[i] now contains the actual position of this digit in output[]
    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
             int curr_digit = (arr[i] / exp) % 10 ;
               output[count[curr_digit] - 1] = arr[i];
        count[curr_digit ]--;
    }

    // Copy the output array to arr[], so that arr[] now contains sorted numbers according to the current digit
    for (int i = 0; i < n; i++)
        arr[i] = output[i];
}

// The main function to that sorts arr[] of size n using Radix Sort
void radixSort(vector<int>& arr) {
    // Find the maximum number to know the number of digits
    int m = *max_element(arr.begin(), arr.end());

    // Do counting sort for every digit. Note that instead of passing the digit number,
    // exp is passed. exp is 10^i where i is the current digit number
    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr, exp);
}

class Solution {
public:
    int ans = 0;
    int emptyCells = 0;

    void dfs(int x, int y, int m, int n, vector<vector<int>>& grid, vector<vector<int>>& vis, int count) {
        if (x < 0 || y < 0 || x >= m || y >= n || vis[x][y] == 1 || grid[x][y] == -1) return;

        if (grid[x][y] == 2) {
            if (count == emptyCells + 1) { //1 extra for last cell
                ans++;
            }
            return;
        }

        vis[x][y] = 1;
        
        dfs(x + 1, y, m, n, grid, vis, count + 1);
        dfs(x - 1, y, m, n, grid, vis, count + 1);
        dfs(x, y + 1, m, n, grid, vis, count + 1);
        dfs(x, y - 1, m, n, grid, vis, count + 1);
        
        vis[x][y] = 0;
    }

    int uniquePathsIII(vector<vector<int>>& grid) {
        int m = grid.size(); 
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int startx = 0, starty = 0;

        // search for start node and count empty cells
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    startx = i;
                    starty = j;
                }
                if (grid[i][j] == 0) {
                    emptyCells++;
                }
            }
        }
        
        dfs(startx, starty, m, n, grid, vis, 0);
        return ans;
    }
};

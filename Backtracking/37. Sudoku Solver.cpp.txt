class Solution {
private:
bool possible(vector<vector<char>>& board,int row,int col, char c)
{
    for (int i = 0; i < 9; i++) {

            if (board[row][i] == c) return false;
            if (board[i][col] == c) return false;

}

        int startCol = 3 * (col/3);
        int startRow = 3 * (row/3);

        for (int i = startRow; i < startRow+3; i++) {
            for (int j = startCol; j < startCol+3; j++) {
                if (board[i][j] == c) return false;
            }
        }

        return true;
}
bool solve(vector<vector<char>> &board)
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(board[i][j]=='.')
            {
                for(char k='1';k<='9';k++)
                {
                    if(possible(board,i,j,k))
                    {
                        board[i][j]=k;
                        if(solve(board)) //agar solve hogya to return back hote rahega true
                        return true;
                        else
                        board[i][j]='.'; //else backtrack hote hote last se empty space bana dega
                    }
                }

                return false;
                //ek baar bhi return true ni hua...1 se 9 tak to false return...false return hoga to ...board[i][j]='.' ho jayega
            }
        }
    }
//if found no empty places means board is already solved
    return true;
}
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
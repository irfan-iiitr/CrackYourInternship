class LRUCache {

   int cap;
   class node{
       public:
       int key;
       int val;
       node* prev;
       node* next;
       node(int k,int v){
           key=k;
           val=v;
       }
   };
   node* head=new node(-1,-1);
   node* tail=new node(-1,-1);
   unordered_map<int,node*> mp; //key ,node
    public:
    LRUCache(int capacity) {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    void delNode(node *del){
        node* temp=del->next;
        del->prev->next=temp;
        temp->prev=del->prev;
    }
    void addNode(node *n)
    {
        node* temp=head->next;
        head->next=n;
        temp->prev=n;
        n->prev=head;
        n->next=temp;

    }
    
    int get(int key) 
    {
        if(mp.find(key)!=mp.end()) //found
        {
             node *t=mp[key];
             mp.erase(key);
             int value=t->val;
             //mp.erase(key);
             delNode(t);
             addNode(t);  
             mp[key]=head->next; //store new head->next the t...we got..its value
             return value;
        }
        else
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){ //if key already there delete it
            node* t=mp[key];
            mp.erase(key);
            delNode(t);
        }
        if(mp.size()==cap){
            //remove from last
            mp.erase(tail->prev->key);
            delNode(tail->prev);
        }
        node* n=new node(key,value);  
        addNode(n);
        mp[key]=n;
    }

};

----------------------------------------STL-----------------------------------------------------------------



class LRUCache {
public:
int size;
list<int> dll;//doubly linked List
map<int,pair<list<int>::iterator,int>> mp;
    LRUCache(int capacity) {
        size=capacity;
    }

    void makeitrecent(int key){
        auto address=mp[key].first;
        dll.erase(address);
        dll.push_front(key);
        mp[key].first=dll.begin();
    }
    
    int get(int key) {
        if(mp.find(key)==mp.end()){
            return -1; //if not found
        }

        //if found
        makeitrecent(key);
        return mp[key].second; //first is address.. second is value
    }
    
    void put(int key, int value) {
        if(mp.find(key)==mp.end()){
            //not found
            dll.push_front(key);
            mp[key]={dll.begin(),value};
            size--;
        }
        else{
            //found
            mp[key].second=value;
            makeitrecent(key);
        }

        if(size<0){
            int last_key=dll.back();
            mp.erase(last_key);
            dll.pop_back();

            size++;
        }
    }
};


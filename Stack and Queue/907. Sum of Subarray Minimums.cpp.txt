class Solution {
public:
    vector<int> prevSmall(vector<int>&arr){
        stack<int> st;
        vector<int> ans;
        for(int i=0;i<arr.size();i++){
            while(!st.empty() and arr[st.top()]>=arr[i]) //include equal in one case
            st.pop();

            if(st.empty()){
                ans .push_back(-1);
            }
            else
            ans.push_back(st.top());

            st.push(i);
        }

        return ans;
    }

vector<int> nextSmall(vector<int>&arr){

        int n=arr.size();
        stack<int> st;
        vector<int> ans(n);

        for(int i=n-1;i>=0;i--){
            while(!st.empty() and arr[st.top()]>arr[i]) //exclude in one case
            st.pop();

            if(st.empty()){
                ans[i]=n;
            }
            else
            ans[i]=st.top();

            st.push(i);
        }

        return ans;
    }
    int sumSubarrayMins(vector<int>& arr) {
        
       long long sum=0;

       vector<int> prev=prevSmall(arr);
       for(auto ele:prev)
       cout<<ele<<" ";
       cout<<endl;
       vector<int> next= nextSmall(arr);

       for(auto ele:next)
       cout<<ele<<" ";
       cout<<endl;
       int n=arr.size();


       long long mod=1e9+7;

       for(int i=0;i<arr.size();i++){
             int rwidth=next[i]-i;
             int lwidth=i-prev[i];

            cout<<lwidth<<" "<<rwidth<<endl;

             int noOfRepetition=(((lwidth%mod*rwidth%mod)%mod)*arr[i])%mod;
             sum=(sum+noOfRepetition)%mod;
       }

       return sum;

    }
};
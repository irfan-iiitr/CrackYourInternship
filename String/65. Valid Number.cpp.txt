class Solution {
public:
    bool isNumber(string s) {
        int n = s.length();
        int i = 0;

        // Skip leading whitespaces
        while (i < n && s[i] == ' ') {
            i++;
        }

        // Handle optional sign
        if (i < n && (s[i] == '+' || s[i] == '-')) {
            i++;
        }

        bool isNumeric = false;
        bool hasDecimal = false;
        bool hasExponent = false;

        // Process digits before decimal or exponent
        while (i < n && isdigit(s[i])) {
            isNumeric = true;
            i++;
        }

        // Process decimal point if present
        if (i < n && s[i] == '.') {
            i++;
            hasDecimal = true;

            // Require at least one digit after decimal if it exists
            while (i < n && isdigit(s[i])) {
                isNumeric = true;
                i++;
            }
        }

        // Process exponent if present
        if (isNumeric && i < n && (s[i] == 'e' || s[i] == 'E')) {
            i++;
            hasExponent = true;

            // Handle optional sign for exponent
            if (i < n && (s[i] == '+' || s[i] == '-')) {
                i++;
            }

            bool hasDigits = false;
            while (i < n && isdigit(s[i])) {
                hasDigits = true;
                i++;
            }

            // Exponent must have at least one digit
            if (!hasDigits) {
                return false;
            }
        }

        // Skip trailing whitespaces
        while (i < n && s[i] == ' ') {
            i++;
        }

        // The number is valid if we have processed all characters and it is numeric
        return isNumeric && i == n;
    }
};
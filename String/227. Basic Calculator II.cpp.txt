class Solution {
public:

    int calculate(string a) {
       int n = a.size();
        
        stack<int> s;
        int ans = 0;
        
        char sign = '+';
        for(int i=0;i<n;i++)
        {
            if(a[i]=='+'||a[i]=='-'||a[i]=='*'||a[i]=='/')
            {
                sign = a[i];
            }
            else if(a[i]>='0' && a[i] <= '9')
            {
                int j = i;
                int num = 0;
                while(j<n&&a[j]>='0'&&a[j]<='9')
                {
                    num = (num*10) + (a[j]-'0');
                    j++;
                }
                i=j-1;
                if(sign=='+')
                {
                    s.push(num);
                }
                else if(sign=='-')
                {
                    s.push(num*-1);
                }
                else if(sign=='*')
                {
                    s.top()=s.top()*num;
                }
                else
                {
                    s.top()=s.top()/num;
                }
            }
        }  
        while(s.size()>0)
        {
            ans = ans + s.top();
            s.pop();
        }
        return ans;
    }
};

 --------------------------------------------ANOTHER METHOD-----------
O(1) Space

class Solution {
public:
    bool isDigit(char c)
    {
        return (c >= '0' && c <= '9');
    }
    
    int calculate(string s) {
        int curr = 0 , prev = 0, res = 0;
        char curr_op = '+';
        int i = 0;
        int l = s.length();
        while(i < l)
        {
            if(isDigit(s[i]))
            {
                curr = 0;
                while(isDigit(s[i]) && i < l)
                {
                    curr *= 10;
                    curr += (s[i] - '0');
                    i++;                    
                }
                i--;

                if(curr_op == '+')
                {
                    res += curr;
                    prev = curr;
                }
                if(curr_op == '-')
                {
                    res -= curr;
                    prev = -curr;
                }
                if(curr_op == '*')
                {
                    res -= prev;
                    res += (prev * curr);

                    prev = (prev * curr);
                }
                if(curr_op == '/')
                {
                    res -= prev;
                    res += int(prev / curr);

                    prev = int(prev / curr);
                }
            }
            else if(s[i] != ' ')
                curr_op = s[i];
            i++;
        }
        return res;
    }
};
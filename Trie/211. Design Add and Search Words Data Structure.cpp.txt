#include <string>
using namespace std;

class Trie {
public:
    Trie* children[26];
    bool isWord;

    Trie() {
        isWord = false;
        for (int i = 0; i < 26; ++i) {
            children[i] = nullptr;
        }
    }
};

class WordDictionary {
public:
    Trie* root;

    WordDictionary() {
        root = new Trie();
    }

    void addWord(string word) {
        Trie* node = root;
        for (char c : word) {
            int idx = c - 'a';
            if (node->children[idx] == nullptr) {
                node->children[idx] = new Trie();
            }
            node = node->children[idx];
        }
        node->isWord = true;
    }

    bool search(string word) {
        return searchUtil(root, word, 0);
    }

private:
    bool searchUtil(Trie* node, const string& word, int index) {
        if (node == nullptr) return false;
        if (index == word.size()) return node->isWord;

        char ch = word[index];
        if (ch == '.') {
            for (int i = 0; i < 26; ++i) {
                if (searchUtil(node->children[i], word, index + 1)) {
                    return true;
                }
            }
            return false;
        } else {
            int idx = ch - 'a';
            return searchUtil(node->children[idx], word, index + 1);
        }
    }
};

 
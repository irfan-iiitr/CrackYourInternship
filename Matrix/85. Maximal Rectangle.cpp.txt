class Solution {
public:
vector<int> nextSmaller(vector<int> v) {
        int n = v.size();
        stack<int> st;
        vector<int> ans(n, 0);

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && v[st.top()] >= v[i])
                st.pop();

            if (st.empty())
                ans[i] = n;
            else
                ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
 vector<int> prevSmaller(vector<int> v) {
        stack<int> st;
        int n = v.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            while (!st.empty() && v[st.top()] >= v[i])
                st.pop();
            if (st.empty())
                ans[i] = -1;
            else
                ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

int largestRectangleArea(vector<int>&v){
     int n=v.size();

     for(auto ele:v)
     cout<<ele<<" ";
     cout<<endl;

     int ans=0;
     stack<int> st;
     for(int i=0;i<=n;i++)
     {
        cout<<i<<endl; 
        while(!st.empty() and (i==n or v[st.top()]>=v[i])){ //if smaller element encountered
          
          int a=st.top();
           int height=v[st.top()]; //height at that index
            st.pop();
            int width;
            if(st.empty())//no prev 
            width=i;
            else
            width=i-st.top()-1;
             if(!st.empty())//no pre
            cout<<a<<" "<<height<<" "<<st.top()<<endl;

            ans=max(ans,width*height);

        }
        st.push(i);
     }

     return ans;

}
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size(); int m=matrix[0].size();
        int ans=0;
        vector<int> heights(m,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='1')
                heights[j]++;
                else
                heights[j]=0;
            }

            int area= largestRectangleArea(heights);
            ans=max(ans,area);
        }
        return ans;
    }
};
-----------------------------------------------LCS_----------------------------------
class Solution {
public:
    int minInsertions(string s) {
        
        string t=s;
        reverse(t.begin(),t.end());
        int n=s.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        int ans=0;

        for(int i=1;i<=n;i++){
          for(int j=1;j<=n;j++){
            if(s[i-1]==t[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
               
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
             ans=max(ans,dp[i][j]);
          }
        }
        return n-ans;
    }
};

----------------------------MEM--------------------

class Solution {
public:
    int minInsertions(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return calculate(s,-1);
    }

    // memoization, got memory limit exceded
    int calculate(int i, int j, string s, vector<vector<int>>& dp) {
        if (i >= j) {
            return 0;
        }
        if (dp[i][j] != -1)
            return dp[i][j];

        if (s[i] == s[j]) {
            return dp[i][j] = calculate(i + 1, j - 1, s, dp);
        }

        return dp[i][j] = 1 + min(calculate(i + 1, j, s, dp),
                                  calculate(i, j - 1, s, dp));
    }

-------------------------------------------------------------------------------------------------
class Solution {
public:
    int minInsertions(string s) {
         int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        for(int i=n-2;i>=0;i--)
        {
            for(int j=i+1;j<n;j++)
            {
                if(s[i]==s[j])
                {
                    dp[i][j] = dp[i+1][j-1];
                }
                else
                {
                    dp[i][j] = min(dp[i+1][j], dp[i][j-1])+1;
                }
            }
        }
        return dp[0][n-1];
    }
};

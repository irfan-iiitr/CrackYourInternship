class Solution {
public:
vector<int> nextSmaller(vector<int> v) {
        int n = v.size();
        stack<int> st;
        vector<int> ans(n, 0);

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && v[st.top()] >= v[i])
                st.pop();

            if (st.empty())
                ans[i] = n;
            else
                ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
 vector<int> prevSmaller(vector<int> v) {
        stack<int> st;
        int n = v.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            while (!st.empty() && v[st.top()] >= v[i])
                st.pop();
            if (st.empty())
                ans[i] = -1;
            else
                ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

int maxArea(vector<int>&v){
    int n=v.size();
    vector<int> prev=prevSmaller(v);
    vector<int> next=nextSmaller(v);
    int ans=INT_MIN;
    for(int i=0;i<n;i++){
        int width=next[i] - prev[i]-1;
        int area=width*v[i];
        ans=max(ans,area);
    }
    return ans;
}
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size(); int m=matrix[0].size();
        int ans=0;
        vector<int> heights(m,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='1')
                heights[j]++;
                else
                heights[j]=0;
            }

            

            int area= maxArea(heights);
            ans=max(ans,area);
        }
        return ans;
    }
};
class Solution {
public:
    int f(int i, int j, vector<int>& nums, vector<vector<int>>& dp) {
        if (i > j) return 0;
        
        if (dp[i][j] != -1) return dp[i][j];

        int ans = 0;
        for (int k = i; k <= j; k++) {
            // The value nums[k] is burst, affecting nums[i-1] and nums[j+1]
            int coins = nums[i-1] * nums[k] * nums[j+1];
            // Calculate the maximum coins by bursting balloons between i and j
            coins += f(i, k-1, nums, dp) + f(k+1, j, nums, dp);
            ans = max(ans, coins);
        }
        
        return dp[i][j] = ans;
    }

    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        vector<vector<int>> dp(n+2, vector<int>(n+2, 0));
        // return f(1, n, nums, dp);

        for(int i=n;i>=1;i--){
            for(int j=i;j<=n;j++){
                int maxi=INT_MIN;
                for(int k=i;k<=j;k++){
                    int cost=nums[i-1]*nums[k]*nums[j+1] + dp[i][k-1] + dp[k+1][j];
                    maxi=max(maxi,cost);
                }
                dp[i][j]=maxi;
            }
        }

        return dp[1][n];
    }
};
class Solution {
public:
//    static int dp[10001][10001]; //add static here
    
//     int f(int k, int n) {
//         if(n<=1) return n;
//         if (k <= 1) return n;
//         if (dp[k][n] != -1) return dp[k][n];

//         int ans = INT_MAX;

//         for (int mid = 1; mid <= n; mid++) {
//             int temp = 1 + max(f(k - 1, mid - 1), f(k, n - mid));
//             ans = min(ans, temp);
//         }
//         return dp[k][n] = ans;
//     }

    int superEggDrop(int k, int n) {
       vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));

        // Initialize base cases
      
        for (int i = 1; i <= k; ++i) {//egg
            for (int j = 1; j <= n; ++j) {//flloor
                if(i==1) dp[i][j]=j;
                else if(j==1) dp[i][j]=1;
                else{
                    int ans=INT_MAX; int l=1,h=j;
                    while(l<=h){
                        int mid=l+(h-l)/2;
                        int brek=dp[i-1][mid-1];
                        int notbreak=dp[i][j-mid];
                        int temp=1+ max(brek,notbreak);
                        if(brek<notbreak){ 
                              l=mid+1;
                        }
                        else
                        h=mid-1;
                        ans=min(ans,temp);
                    }
                    dp[i][j]=ans;

                }

            }
        }

        return dp[k][n];
    }
};

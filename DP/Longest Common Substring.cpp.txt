int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        // your code here
    //     int n = s1.size();
    // int m = s2.size();
    
    // Create a 2D DP table with dimensions (n+1) x (m+1)
    vector<vector<int>>  dp(n+1, vector<int>(m+1, 0));

    int ans = 0; // Initialize the answer variable

    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++){
            if(s1[i-1] == s2[j-1]){
                int val = 1 + dp[i-1][j-1]; // Characters match, increment substring length
                dp[i][j] = val; // Update the DP table
                ans = max(ans, val); // Update the maximum substring length found so far
            }
            else
                dp[i][j] = 0; // Characters don't match, substring length becomes 0
        }
    }
    
    return ans; // Return the length of the Longest Common Substring

-----------------------------------------------------------------------------------------

class Solution{
    public:
    int check(string s1, string s2, int n, int m, int ans){
        if(n == 0 or m == 0)
            return ans;
        if(s1[n-1]==s2[m-1])
            ans=check(s1, s2, n-1, m-1,1+ans);
        else
            ans =  max(ans,max(check(s1,s2,n-1,m,0),check(s1,s2,n,m-1,0)));
        return ans;
    }
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        // your code here
        return check(S1,S2,n,m,0);
    }
};
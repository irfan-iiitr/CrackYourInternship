class Solution {
public:
    int find(vector<int> &prices,int ind,bool buy,int c,int k,vector<vector<vector<int>>> &memo)
    {   //if buy =1 means we have to buy now
        //else we have to sell now
        if(ind>=prices.size()||c>=k) return 0; //counter
        
        else if(memo[ind][buy][c]!=-1) return memo[ind][buy][c];
         
        if(buy) //now we can either buy prices[i] or we can skip it and try next to buy
        {
        return memo[ind][buy][c]=max(-prices[ind]+find(prices,ind+1,!buy,c,k,memo),find(prices,ind+1,buy,c,k,memo));
        }
        else  //now we can either sell prices[i] or we can skip it and try next to sell
        {
        return memo[ind][buy][c]=max(prices[ind]+find(prices,ind+1,!buy,c+1,k,memo),find(prices,ind+1,buy,c,k,memo));
        }
        
    }
    int maxProfit(int k, vector<int>& prices) {
        
        //edge case we are not able to pick 2k points from n points, which means 
        //we will not reach the limit no matter how we try. 
        //if the price of day i arise, buy the stock in i-1th day and sell it at ith day.
        if (2 * k > prices.size()) {
            int res = 0;
            for (int i = 1; i < prices.size(); i++) {
                res += max(0, prices[i] - prices[i - 1]);
            }
            return res;
        }
        
         //here we can do maximum k transaction
        vector<vector<vector<int>>> memo(prices.size()+1,vector<vector<int>>(2,vector<int>(k+1,-1)));
        return find(prices,0,1,0,k,memo); 
    }
};



-------------------------------------------------------TAB-----------------------------------------

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=pries.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(k+1,0)));
         
         for(int i=0;i<n;i++){
            for(int buy=0;buy<=1;buy++){
                for(int cap=1;cap<=k;cap++){
                    int op1=0,op2=0;
                    if(buy==0){
                       op1=dp[i+1][0][cap];
                       op2=-prices[i]+dp[i+1][1][cap];
                    }
                    else{
                        op1=dp[i+1][1][cap];
                       op2=prices[i]+dp[i+1][0][cap-1];
                    }

                    dp[i][buy][cap]=max(op1,op2);
                }
            }
         }

         return dp[n-1][0][cap];
    }
};


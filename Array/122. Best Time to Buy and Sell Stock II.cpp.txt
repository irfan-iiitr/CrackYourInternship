class Solution {
public:
int f(int i,int bought,vector<int>&arr){
    if(i==arr.size()) return 0;
    int op1=0,op2=0;
    if(bought==0){
        op1=f(i+1,0,arr);
        op2=-arr[i]+ f(i+1,1,arr);
    }
    else{
        op1=f(i+1,1,arr);
        op2= arr[i]+f(i+1,0,arr);
    }
    return max(op1,op2);
}


int maxProfit(vector<int>& prices) {
        return f(0,0,arr);
        int n=arr.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));

        for(int i=n-1;i>=0;i--){
            for(int bought=0;bought<=1;bought++){
                 int op1=0,op2=0;
                    if(bought==0){
                        op1=dp[i+1][0];
                        op2=-arr[i]+ dp[i+1][1];
                    }
                    else{
                        op1=dp[i+1][1];
                        op2= arr[i]+dp[i+1][0];
                    }
               dp[i][bought]= max(op1,op2);
            }
        }

        return dp[0][0];
         int profit=0;
        int n=prices.size();

        if(n==1)
            return 0;

        for(int i=1;i<n;i++)
        {
            if(prices[i-1] < prices[i])
                profit+=( prices[i] - prices[i-1]);

        }

        return profit;
    }

3 methods
};
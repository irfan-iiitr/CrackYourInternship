class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL) return head;
        ListNode* newHead = NULL;
        while(head != NULL){
            ListNode* next = head->next;
            head->next = newHead;
            newHead = head;
            head = next;
        } 

        return newHead;
    }
    ListNode* add(ListNode* l1, ListNode* l2) {
        auto dummyHead = new ListNode(0); 
        auto curr = dummyHead;
        int carry = 0;

        while(l1 != NULL || l2 != NULL || carry > 0){
            int sum = carry;

            if(l1 != NULL){
                sum += l1->val;
                l1 = l1->next;
            }

            if(l2 != NULL){
                sum += l2->val;
                l2 = l2->next;
            }

            int digit = sum%10;
            carry = sum/10;

            curr->next = new ListNode(digit);
            curr = curr->next;
        }

        return dummyHead->next;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* nl1 = reverseList(l1);
        ListNode* nl2 = reverseList(l2);
        return (reverseList(add(nl1, nl2)));
    }
};
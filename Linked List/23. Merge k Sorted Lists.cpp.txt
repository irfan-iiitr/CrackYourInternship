    ListNode* mergeKLists(vector<ListNode*>& lists) {
       if(lists.size() == 0) return NULL;

        ListNode* dummyHead = new ListNode(-1);
        ListNode* dummyTail = dummyHead;

        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> pq;
        for(auto head : lists)  if(head != NULL) pq.push({head->val, head});

        while(!pq.empty()){
            ListNode* minNode = pq.top().second;
            pq.pop();
            if(minNode->next != NULL) pq.push({minNode->next->val, minNode->next});

            dummyTail->next = minNode;
            dummyTail = dummyTail->next;
        }
        return dummyHead->next;
     
    }



 ------------------------------------------MERGE and SORT -------------------------


class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       if(lists.size() == 0) return NULL;

       return helper(0,lists.size()-1,lists);
    }
    ListNode* helper(int start,int end, vector<ListNode*>&lists){
        if(start==end) return lists[start]; //only one list
         
         if(start+1==end){
            return merge(lists[start],lists[end]); //two lists
         }
        int mid=start+ (end-start)/2;
        ListNode* left= helper(start,mid,lists);
        ListNode* right= helper(mid+1,end,lists);
        return merge(left,right);
    }
    
    ListNode* merge(ListNode* l1,ListNode* l2){
        ListNode* dummy= new ListNode(0);
        ListNode* curr=dummy;

        while(l1 and l2){
            if(l1->val < l2->val){
                curr->next=l1; l1=l1->next;
            }
            else{
                curr->next=l2; l2=l2->next;
            }
            curr=curr->next;
        }

        if(l1)
        curr->next=l1;
        else
        curr->next=l2;

        return dummy->next;
    }
};